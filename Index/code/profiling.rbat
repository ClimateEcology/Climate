source("code/session.rbat")

library(profvis)

# setup

    load("data/sc.RDA")

	sc <- sc[, c(1:4, 8, 12, 16, 20)]

	sc$Date <- as.Date(paste(sc$YEAR, sc$MONTH, sc$DAY, sep="-"))

	## week-related date descriptions
	# Using K for week to avoid confusion with Winter

	# ISO8601 standard
	sc$Week <- ISOweek(sc$Date) # %V does not work reliably on Windows apparently
	sc$KYEAR <- substring(sc$Week, 1, 4)
	sc$KWEEK <- substring(sc$Week, 7, 8)

	# ‘%u’ Weekday as a decimal number (1-7, Monday is 1).
	# ISO8601 weeks begin on Monday
	sc$KDAY <- format(sc$Date, "%u")

	## winter-related date descriptions
	# Using N for winter to avoid confusion with Week
    # The full-winter year starts on July 1 instead of January 1
    # so the winter of 2017-2018 is coded 2017
	sc$DOY <- jdoy(sc$Date)
	sc$NDOY <- winter(sc$DOY)
	sc$NYEAR <- sc$YEAR
	sc$NYEAR[sc$DOY < sc$NDOY] <- sc$NYEAR[sc$DOY < sc$NDOY] - 1

    # aggregation

    # starting point
    system.time(sc.week <- weatheragg(sc, byvar=c("KWEEK", "KYEAR")))
   user  system elapsed 
  1.886   0.128   2.018 

    profvis(
        sc.week <- weatheragg(sc, byvar=c("KWEEK", "KYEAR"))
    )

    # round 1 - updated aggregations
    system.time(sc.week2 <- weatheragg2(sc, byvar=c("KWEEK", "KYEAR")))
   user  system elapsed 
  1.280   0.090   1.371 

    profvis(
        sc.week2 <- weatheragg2(sc, byvar=c("KWEEK", "KYEAR"))
    )

    # round 2 - error checking
    # the rest of the time use in is basic functions like sd()
    # tried removing error checking from sd

    system.time(sc.week3 <- weatheragg(sc, byvar=c("KWEEK", "KYEAR")))
   user  system elapsed 
  0.962   0.040   1.009 

    profvis(
        sc.week3 <- weatheragg(sc, byvar=c("KWEEK", "KYEAR"))
    )

##############
# faster statistical functions without error checking


x <- runif(10000)
x2 <- x
x2[sample(seq_len(length(x)), 100)] <- NA

# mean

fastmean <- function(x) {
    x <- x[!is.na(x)]
    sum(x)/length(x)
}



system.time({
    for(i in 1:10000) mean(x, na.rm=TRUE)})

system.time({
    for(i in 1:10000) fastmean(x)})

system.time({
    for(i in 1:10000) mean(x2, na.rm=TRUE)})

system.time({
    for(i in 1:10000) fastmean(x2)})

> system.time({
+     for(i in 1:10000) mean(x, na.rm=TRUE)})
   user  system elapsed 
  0.645   0.052   0.699 
> 
> system.time({
+     for(i in 1:10000) fastmean(x)})
   user  system elapsed 
  0.528   0.015   0.545 
> 
> system.time({
+     for(i in 1:10000) mean(x2, na.rm=TRUE)})
   user  system elapsed 
  0.637   0.025   0.664 
> 
> system.time({
+     for(i in 1:10000) fastmean(x2)})
   user  system elapsed 
  0.523   0.013   0.538 


system.time({
     for(i in 1:10000) mean(tempdat$tmin, na.rm=TRUE)})

system.time({
     for(i in 1:10000) fastmean(tempdat$tmin)})

> system.time({
+      for(i in 1:10000) mean(tempdat$tmin, na.rm=TRUE)})
   user  system elapsed 
  3.885   0.008   3.913 
> 
> system.time({
+      for(i in 1:10000) fastmean(tempdat$tmin)})
   user  system elapsed 
  3.389   0.005   3.413 


  ###



fastsd <- function(x) {
    xvar <- var(x, na.rm=TRUE)
    sqrt(xvar)
}

fastsd2 <- function(x) {
#    xvar <- var(x, use="complete.obs")
    x <- x[!is.na(x)]
    xvar <- .Call(stats:::C_cov, x, NULL, 1, FALSE, PACKAGE="stats")
    sqrt(xvar)
}


system.time({
    for(i in 1:100000) sd(x, na.rm=TRUE)})

system.time({
    for(i in 1:100000) fastsd(x)})

system.time({
    for(i in 1:100000) fastsd2(x)})




system.time({
    for(i in 1:100000) sd(x2, na.rm=TRUE)})

system.time({
    for(i in 1:100000) fastsd(x2)})

system.time({
    for(i in 1:100000) fastsd2(x2)})





system.time({
     for(i in 1:10000) sd(tempdat$tmin, na.rm=TRUE)})

system.time({
     for(i in 1:10000) fastsd(tempdat$tmin)})

system.time({
     for(i in 1:10000) fastsd2(tempdat$tmin)})


> 
> 
> 
> system.time({
+     for(i in 1:100000) sd(x2, na.rm=TRUE)})
   user  system elapsed 
  7.866   0.000   7.883 
> 
> system.time({
+     for(i in 1:100000) fastsd(x2)})
   user  system elapsed 
  7.853   0.000   7.870 
> 
> system.time({
+     for(i in 1:100000) fastsd2(x2)})
   user  system elapsed 
  9.014   0.048   9.082 



  ##

fastskew <- function(x) {
    x <- x[!is.na(x)]
    n <- length(x)
    x <- x - sum(x)/length(x)
    y <- sqrt(n) * sum(x^3)/(sum(x^2)^(3/2))
    y * ((1 - 1/n))^(3/2)
}



system.time({
    for(i in 1:10000) e1071::skewness(x, na.rm=TRUE)})

system.time({
    for(i in 1:10000) fastskew(x)})

system.time({
    for(i in 1:10000) e1071::skewness(x2, na.rm=TRUE)})

system.time({
    for(i in 1:10000) fastskew(x2)})
> system.time({
+     for(i in 1:10000) e1071::skewness(x, na.rm=TRUE)})
   user  system elapsed 
  7.400   0.006   7.422 
> 
> system.time({
+     for(i in 1:10000) fastskew(x)})
   user  system elapsed 
  7.358   0.008   7.381 
> 
> system.time({
+     for(i in 1:10000) e1071::skewness(x2, na.rm=TRUE)})
   user  system elapsed 
  7.685   0.008   7.714 
> 
> system.time({
+     for(i in 1:10000) fastskew(x2)})
   user  system elapsed 
  7.358   0.003   7.376 

  ### shaved the tiniest bit off of everything


    system.time(sc.week4 <- weatheragg(sc, byvar=c("KWEEK", "KYEAR")))

   user  system elapsed 
  0.826   0.032   0.869 
    profvis(
        sc.week4 <- weatheragg(sc, byvar=c("KWEEK", "KYEAR"))
    )


  #### Good enough!

  # What about bioclim?


    temp <- subset(sc.week, KYEAR %in% c(2015, 2016, 2017))
    temp <- subset(temp, KWEEK <= 52)
    system.time(climb <- climates::bioclim(
                      tmin = matrix(temp$tmin, nrow=3, byrow=TRUE),
                      tmax = matrix(temp$tmax, nrow=3, byrow=TRUE),
                      prec = matrix(temp$precip, nrow=3, byrow=TRUE),
                      period="week"))

   user  system elapsed 
  0.003   0.000   0.003 

  system.time(
    myb <- rbind(
        bioclim.year(subset(sc.week, KYEAR==2015)),
        bioclim.year(subset(sc.week, KYEAR==2016)),
        bioclim.year(subset(sc.week, KYEAR==2017))))

   user  system elapsed 
  0.079   0.002   0.082 
  
 # Whoa why is mine so much slower?

    profvis({for(i in 1:100)
    myb <- rbind(
        bioclim.year(subset(sc.week, KYEAR==2015)),
        bioclim.year(subset(sc.week, KYEAR==2016)),
        bioclim.year(subset(sc.week, KYEAR==2017)))    })

 # 1. Moved data frame bit to end of quarter()

   user  system elapsed 
  0.034   0.000   0.033 

# 2. Moved to fastmean()

   user  system elapsed 
  0.008   0.001   0.009 


  # curious about seq()

  system.time(for(i in 1:10000)
              seq(i, by=1, length=5000))

  system.time(for(i in 1:10000)
              seq(i, i+5000-1))


# Huh.

>   system.time(for(i in 1:10000)
+               seq(i, by=1, length=5000))
   user  system elapsed 
  0.294   0.010   0.308 
> 
>   system.time(for(i in 1:10000)
+               seq(i, i+5000-1))
   user  system elapsed 
  0.048   0.005   0.053 

  # change that: doesn't make much difference but keep it.

   user  system elapsed 
  0.008   0.000   0.009 


  # not much I can do to optimize climdex
